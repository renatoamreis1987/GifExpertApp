{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAUaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAmBhD,OACE,sBAAMC,SAXa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SApBoB,SAACP,GAEzBF,EAAcE,EAAEQ,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXjB,kBAedM,GAfc,4CAAH,sDCLPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGnC,OACE,sBAAKc,UAAU,yCAAf,UACG,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAKA,QCACO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECCb,SAACA,GAAc,IAAD,EACdd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GACtBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACpB,IAEGqB,EDf2BK,CAAa1B,GAAjCa,EADyB,EAC/BN,KAAca,EADiB,EACjBA,QAEtB,OACE,qCACE,qBAAIJ,UAAU,oCAAd,cAAoDhB,KAEnDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAEZ,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aELnBgB,EAAe,WAAM,MAEIzC,mBAAS,CAAC,cAFd,mBAEzB0C,EAFyB,KAEb3C,EAFa,KAIhC,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG2C,EAAWnB,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCrBxB6B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.c6751cf4.chunk.js","sourcesContent":["/*\r\nAddCategory es el componente responsable de gestionar el buscador, \r\nen este caso va a obtener lo que ponemos en el buscador y guardarlo en el Hook useState, \r\ny lo vamos pasar al componente “GifExpertApp” en “setCategories((cats) => [inputValue, ...cats])”\r\n*/\r\n\r\n\r\nimport React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n  // Hook useState\r\n  const [inputValue, setinputValue] = useState(\"\");\r\n\r\n  const handleInputChange = (e) => {\r\n    // Aquí vamos a añadir a inputValue el valor del input\r\n    setinputValue(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (inputValue.trim().length > 2) {\r\n      // Aquí vamos a obtener las cats (desde un cb) y añadir el valor de input\r\n      setCategories((cats) => [inputValue, ...cats]);\r\n      setinputValue(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        value={inputValue}\r\n        onChange={handleInputChange}\r\n      ></input>\r\n    </form>\r\n  );\r\n};\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired,\r\n};\r\n","/* ESTO ES UNA HELPER FUNCTION\r\nLo que va a hacer esta función es hacer una llamada API y obtener la información. \r\n\r\nUsamos desestructuración, que nos va a devolver un array con objectos\r\ny después un map para obtener solo la info importante de cada objecto, \r\ny por fin retornamos los resultados.\r\n\r\n*/\r\n\r\nexport const getGifs = async (category) => {\r\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\r\n    category\r\n  )}&limit=10&api_key=PXocYnR1s9iRmAyW8RmI8wqbEmdRYlWa`;\r\n  const resp = await fetch(url);\r\n  const { data } = await resp.json();\r\n\r\n  const gifs = data.map((img) => {\r\n    return {\r\n      id: img.id,\r\n      title: img.title,\r\n      url: img.images?.downsized_medium.url,\r\n    };\r\n  });\r\n\r\n  return gifs;\r\n};\r\n","// GifGridItem es un simples componente que lo único que va hacer es renderizar un div para cada GIF. \r\n\r\nimport React from 'react'\r\n\r\nexport const GifGridItem = ( {title, url} ) => {\r\n  \r\n\r\n  return (\r\n    <div className='card animate__animated animate__fadeIn'>\r\n       <img src={url} alt={title} />\r\n       <p>{ title }</p>\r\n    </div>\r\n  )\r\n}\r\n","/*\r\nGifGrid es el componente responsable por renderizar el conjunto de GIFs de una categoría, \r\nva llamar a uno HOOKS -> useFetchGifs para obtener el listado, \r\ny una vez tenga ese listado lo va a renderizar llamando otro componente, GifGridItem. \r\n*/\r\n\r\nimport React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h3 className='animate__animated animate__fadeIn'> {category}</h3>\r\n\r\n      {loading && <p className='animate__animated animate__flash'>Loading</p>}\r\n\r\n      <div className=\"card-grid\">\r\n        {images.map((img) => (\r\n          <GifGridItem key={img.id} {...img} />\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\n","/* ESTO ES UN CUSTOM HOOK \r\n\r\nEn este CUSTOM HOOK lo que vamos hacer es llamar a useEffect, que es una helper Function, \r\nen la cual pasamos la categoría (la búsqueda) y obtenemos una promesa con los resultados, \r\ny la almacenamos en nuestro useState y la enviamos como promesa con un return.  \r\n\r\n*/\r\n\r\nimport { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setstate] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((imgs) => {\r\n      setstate({\r\n        data: imgs,\r\n        loading: false,\r\n      });\r\n    });\r\n  }, [category]);\r\n\r\n  return state; // {data: [], loading: true}\r\n};\r\n","/* \r\nEste es el componente principal, donde llamamos a otros 2 componentes. \r\n\r\nAddCategory que es lo que va a gestionar el input, \r\nle pasamos setCategories para que el resultado que va a devolver se almacene en el Hook useState \r\nde este mismo componente (categories), y así poder pasarlo después a otro componente, GifGrid.  \r\n\r\nGifGrid va a ser el componente responsable de renderizar las imágenes, \r\nal cual vamos a pasar todas las categories que tenemos almacenadas, \r\ny para cada una de ellas vamos a ejecutar el componente GifGrid.\r\n*/ \r\n\r\nimport React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GifGrid } from \"./components/GifGrid\";\r\n\r\nexport const GifExpertApp = () => {\r\n  // Hook useState\r\n  const [categories, setCategories] = useState([\"Samurai X\"]);\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      <ol>\r\n        {categories.map((category) => (\r\n          <GifGrid key={category} category={category} />\r\n        ))}\r\n      </ol>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n"],"sourceRoot":""}